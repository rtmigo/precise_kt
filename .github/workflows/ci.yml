name: ci

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/badges/**.svg'
  pull_request:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/badges/**.svg'

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

#concurrency:
#  group: ci-tests-${{ github.ref }}-1
#  cancel-in-progress: true

jobs:
  unit-test:
    timeout-minutes: 15

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'Merge remote-tracking branch') }}

    strategy:
      matrix:
        os: [ ubuntu-latest ] # windows-latest
        jdk_version: [ 8, 18 ]

    steps:

      - uses: actions/checkout@v2

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: Setup JDK ${{ matrix.jdk_version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.jdk_version }}
          distribution: 'temurin'
          cache: gradle

      - name: Run unit tests
        run: gradle test --no-daemon --info



#  assert-github-release-not-exists:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup KScript
#        run: |
#          curl -s "https://get.sdkman.io" | bash
#          source "$HOME/.sdkman/bin/sdkman-init.sh"
#          sdk install kotlin
#          sdk install kscript
#      - name: Just print
#        run: gh release list
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Check version
#        run: |
#          source "$HOME/.sdkman/bin/sdkman-init.sh"
#          kscript -s .github/get_target_pkgver.kts
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-dev-as-module-from-git:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ] # windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Build sample project that uses the library
        run: |
          pip install git+https://github.com/rtmigo/tempp_py
          python test_as_git_module.py dev

  to-staging:
    needs: [unit-test, test-dev-as-module-from-git]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Merge current -> staging
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: staging
          github_token: ${{ github.token }}

  publish-flag:
    if: github.event.head_commit.message=='publish'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

  to-master:
    needs: [ to-staging,
             publish-flag,
             assert-sonatype-credentials-set,
             assert-github-release-not-exists ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Merge to master branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: master
          github_token: ${{ github.token }}

  assert-github-release-not-exists:
    # проверяем, что из Gradle можно получить номер релиза, и что такой релиз
    # ещё не публиковался
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK 8
        # Java понадобится, чтобы из Gradle получить номер релиза.
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python .github/get_target_pkgver.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  to-github-release:
    needs: [ to-master, assert-github-release-not-exists ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

#
#      - name: Setup KScript
#        run: |
#          curl -s "https://get.sdkman.io" | bash
#          source "$HOME/.sdkman/bin/sdkman-init.sh"
#          sdk install kotlin
#          sdk install kscript

#      - name: Get the project version
#        run: |
#          source "$HOME/.sdkman/bin/sdkman-init.sh"
#          echo "PKGVER=$(kscript -s .github/get_target_pkgver.kts)" >> $GITHUB_ENV
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the project version
        run: |
          echo "PKGVER=$(python .github/get_target_pkgver.py)" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

#      - name: Get the project version
#        run: |
#           # warm up (skip progress indicator)
#           ./gradlew pkgver -q
#           # store version to var
#           echo "PKGVER=$(./gradlew pkgver -q --console=plain)" >> $GITHUB_ENV

#      - uses: fwilhe2/setup-kotlin@main
#        with:
#          version: 1.7.0
#      - name: Run the script
#        run: kotlin .github/get_target_pkgver.kts

#      - name: Get the project version
#        run: |
#           # warm up (skip progress indicator)
#           ./gradlew pkgver -q
#           # store version to var
#           echo "PKGVER=$(kotlin .github/get_target_pkgver.main.kts)" >> $GITHUB_ENV

      - name: Publish GitHub release
        id: publish_github_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PKGVER }}
          files: ./build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  to-github-package:
    needs: [ to-master ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Publish as Maven to GitHub
        run:
          ./gradlew publish
        env:
          # this token is predefined
          GITHUB_PKGPUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ##################################################################################################

  assert-sonatype-credentials-set:
    needs: [ publish-flag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check variables
        run:
          if [ -z "$MAVEN_GPG_KEY" ]; then exit 1; fi
          if [ -z "$MAVEN_GPG_PASSWORD" ]; then exit 1; fi
          if [ -z "$SONATYPE_USERNAME" ]; then exit 1; fi
          if [ -z "$SONATYPE_PASSWORD" ]; then exit 1; fi
        env:
          MAVEN_GPG_KEY: ${{ secrets.MAVEN_GPG_KEY }}
          MAVEN_GPG_PASSWORD: ${{ secrets.MAVEN_GPG_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

  to-maven-central-package:
    needs: [ to-master ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Publish as Maven to Sonatype
        run:
          ./gradlew publish closeAndReleaseRepository
        env:
          MAVEN_GPG_KEY: ${{ secrets.MAVEN_GPG_KEY }}
          MAVEN_GPG_PASSWORD: ${{ secrets.MAVEN_GPG_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
