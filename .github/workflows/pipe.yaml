################################################################################
#
#            BEFORE EDITING MAKE SURE THIS IS NOT A SYNCED COPY
#
################################################################################

# Этот скрипт опционально готов публиковать релиз в Maven Central. Пока он
# не получит команду на публикацию, он не будет проверять наличие реквизитов.

name: Gradle Pipe

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/badges/**.svg'

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  release-flag:
    if: contains(github.event.head_commit.message, '!!release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

  unit-test:
    timeout-minutes: 15

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'Merge remote-tracking branch') }}

    strategy:
      matrix:
        os: [ ubuntu-latest ] # windows-latest
        jdk_version: [ 8, 18 ]

    steps:
      - uses: actions/checkout@v2
      - name: Update submodules
        run: git submodule update --init --recursive
      - name: Setup JDK ${{ matrix.jdk_version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.jdk_version }}
          distribution: 'temurin'
          cache: gradle
      - name: Run unit tests
        run: gradle test --no-daemon --info

  test-dev-as-module-from-git:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ] # windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Build sample project that uses the library
        run: |
          pip install git+https://github.com/rtmigo/tempp_py
          python test_as_git_module.py dev

  check-version:
    # Узнаёт версию Java-пакета и запоминает её на случай релиза.
    #
    # После релиза в гитхаб считаем недопустимыми существования вариаций кода
    # с той же версией. Даже тесты будем считать несостоявшимися. Так мы будем
    # уверены, что любой прошедший тесты код можно зарелизить.
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.result }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK
        # Java понадобится, чтобы из Gradle получить номер релиза.
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get the project version
        id: get_version
        run: echo "::set-output name=result::$(python .github/gradle_pkgver_not_on_gh.py)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  assert-sonatype-credentials-set:
    # это мы проверяем не всегда, а только перед релизом. Но быстро и сразу
    needs: [ release-flag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check variables
        run: |
          if [ -z "$MAVEN_GPG_KEY" ]; then exit 1; fi
          if [ -z "$MAVEN_GPG_PASSWORD" ]; then exit 1; fi
          if [ -z "$SONATYPE_USERNAME" ]; then exit 1; fi
          if [ -z "$SONATYPE_PASSWORD" ]; then exit 1; fi
        env:
          MAVEN_GPG_KEY: ${{ secrets.MAVEN_GPG_KEY }}
          MAVEN_GPG_PASSWORD: ${{ secrets.MAVEN_GPG_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}


  to-staging:
    needs: [ unit-test, test-dev-as-module-from-git, check-version ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Merge current -> staging
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: staging
          github_token: ${{ github.token }}

  to-master:
    needs: [ to-github-release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Merge to master branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: master
          github_token: ${{ github.token }}

  ## GITHUB RELEASE AND PACKAGE ################################################

  to-github-release:
    needs: [ to-staging, release-flag, check-version, assert-sonatype-credentials-set ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Publish GitHub release
        id: publish_github_release
        uses: softprops/action-gh-release@v1
        with:
          # тег для релиза мы давно выяснили
          tag_name: ${{ needs.check-version.outputs.version }}
          files: ./build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  to-github-package:
    # Полагаем, что без токенов наш Gradle публиковать не умеет никуда.
    # А в данном случае мы ему даём GITHUB_PKGPUB_TOKEN, и он сориентируется,
    # что публикуем в GitHub Packages
    needs: [ to-github-release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Publish
        run:
          ./gradlew publish
        env:
          # the secrets.GITHUB_TOKEN is predefined
          GITHUB_PKGPUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  to-maven-central-package:
    needs: [ to-github-release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: gradle
      - name: Publish as Maven to Sonatype
        run:
          ./gradlew publish closeAndReleaseRepository
        env:
          MAVEN_GPG_KEY: ${{ secrets.MAVEN_GPG_KEY }}
          MAVEN_GPG_PASSWORD: ${{ secrets.MAVEN_GPG_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}